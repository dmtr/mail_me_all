// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import models "github.com/dmtr/mail_me_all/backend/models"
import uuid "github.com/google/uuid"

// UserDatastore is an autogenerated mock type for the UserDatastore type
type UserDatastore struct {
	mock.Mock
}

// GetToken provides a mock function with given fields: ctx, userID
func (_m *UserDatastore) GetToken(ctx context.Context, userID uuid.UUID) (models.Token, error) {
	ret := _m.Called(ctx, userID)

	var r0 models.Token
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) models.Token); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(models.Token)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByFbID provides a mock function with given fields: ctx, fbID
func (_m *UserDatastore) GetUserByFbID(ctx context.Context, fbID string) (models.User, error) {
	ret := _m.Called(ctx, fbID)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(context.Context, string) models.User); ok {
		r0 = rf(ctx, fbID)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, fbID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: ctx, userID
func (_m *UserDatastore) GetUserByID(ctx context.Context, userID uuid.UUID) (models.User, error) {
	ret := _m.Called(ctx, userID)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) models.User); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertToken provides a mock function with given fields: ctx, token
func (_m *UserDatastore) InsertToken(ctx context.Context, token models.Token) (models.Token, error) {
	ret := _m.Called(ctx, token)

	var r0 models.Token
	if rf, ok := ret.Get(0).(func(context.Context, models.Token) models.Token); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(models.Token)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.Token) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertUser provides a mock function with given fields: ctx, user
func (_m *UserDatastore) InsertUser(ctx context.Context, user models.User) (models.User, error) {
	ret := _m.Called(ctx, user)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(context.Context, models.User) models.User); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateToken provides a mock function with given fields: ctx, token
func (_m *UserDatastore) UpdateToken(ctx context.Context, token models.Token) (models.Token, error) {
	ret := _m.Called(ctx, token)

	var r0 models.Token
	if rf, ok := ret.Get(0).(func(context.Context, models.Token) models.Token); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(models.Token)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.Token) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, user
func (_m *UserDatastore) UpdateUser(ctx context.Context, user models.User) (models.User, error) {
	ret := _m.Called(ctx, user)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(context.Context, models.User) models.User); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
